/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  AuthProxy,
  AuthProxyInterface,
} from "../../../contracts/proxies/AuthProxy";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "UserNotAuthorized",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user_",
        type: "address",
      },
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes4",
        name: "func",
        type: "bytes4",
      },
    ],
    name: "addAdminUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes4",
        name: "func",
        type: "bytes4",
      },
    ],
    name: "can",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50336000908152602081815260408083203084528252808320630281651f60e01b84529091529020805460ff19166001179055610249806100526000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80630281651f1461003b5780632d5b987a14610050575b600080fd5b61004e6100493660046101bf565b610077565b005b61006361005e3660046101bf565b610157565b604051901515815260200160405180910390f35b3360009081526020818152604080832030845282528083206001600160e01b0319843516845290915290205460ff1615600114156100cf576040516310f8e8d760e31b81523360048201526024015b60405180910390fd5b6001600160a01b0383166101135760405162461bcd60e51b815260206004820152600b60248201526a183c181021bab930ba37b960a91b60448201526064016100c6565b6001600160a01b039283166000908152602081815260408083209490951682529283528381206001600160e01b03199092168152915220805460ff19166001179055565b6001600160a01b0380841660009081526020818152604080832093861683529281528282206001600160e01b03198516835290529081205460ff168061019b575060005b949350505050565b80356001600160a01b03811681146101ba57600080fd5b919050565b6000806000606084860312156101d457600080fd5b6101dd846101a3565b92506101eb602085016101a3565b915060408401356001600160e01b03198116811461020857600080fd5b80915050925092509256fea2646970667358221220173a966186e04b23ebbb2245912d7d6f7d1cd9d4f789058442d1c2515efedd8264736f6c63430008090033";

type AuthProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AuthProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AuthProxy__factory extends ContractFactory {
  constructor(...args: AuthProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AuthProxy> {
    return super.deploy(overrides || {}) as Promise<AuthProxy>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AuthProxy {
    return super.attach(address) as AuthProxy;
  }
  override connect(signer: Signer): AuthProxy__factory {
    return super.connect(signer) as AuthProxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AuthProxyInterface {
    return new utils.Interface(_abi) as AuthProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AuthProxy {
    return new Contract(address, _abi, signerOrProvider) as AuthProxy;
  }
}
