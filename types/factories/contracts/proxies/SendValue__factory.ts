/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  SendValue,
  SendValueInterface,
} from "../../../contracts/proxies/SendValue";

const _abi = [
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_to",
        type: "address",
      },
    ],
    name: "sendViaCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_to",
        type: "address",
      },
    ],
    name: "sendViaSend",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_to",
        type: "address",
      },
    ],
    name: "sendViaTransfer",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610246806100206000396000f3fe6080604052600436106100405760003560e01c806312065fe014610049578063636e082b1461006957806374be48061461007c578063830c29ae1461008f57005b3661004757005b005b34801561005557600080fd5b504760405190815260200160405180910390f35b6100476100773660046101e0565b6100a2565b61004761008a3660046101e0565b6100db565b61004761009d3660046101e0565b61014c565b6040516001600160a01b038216903480156108fc02916000818181858888f193505050501580156100d7573d6000803e3d6000fd5b5050565b6040516000906001600160a01b038316903480156108fc029184818181858888f193505050509050806100d75760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b60448201526064015b60405180910390fd5b6000816001600160a01b03163460405160006040518083038185875af1925050503d8060008114610199576040519150601f19603f3d011682016040523d82523d6000602084013e61019e565b606091505b50509050806100d75760405162461bcd60e51b815260206004820152600e60248201526d11985a5b1959081d1bc81cd95b9960921b6044820152606401610143565b6000602082840312156101f257600080fd5b81356001600160a01b038116811461020957600080fd5b939250505056fea26469706673582212203e05f922f35e2bf207b4f455ee49775fe98f0c52e71127d6285b467882d78ff864736f6c63430008090033";

type SendValueConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SendValueConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SendValue__factory extends ContractFactory {
  constructor(...args: SendValueConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SendValue> {
    return super.deploy(overrides || {}) as Promise<SendValue>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SendValue {
    return super.attach(address) as SendValue;
  }
  override connect(signer: Signer): SendValue__factory {
    return super.connect(signer) as SendValue__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SendValueInterface {
    return new utils.Interface(_abi) as SendValueInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SendValue {
    return new Contract(address, _abi, signerOrProvider) as SendValue;
  }
}
